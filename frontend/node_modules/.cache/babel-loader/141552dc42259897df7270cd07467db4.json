{"ast":null,"code":"import _toConsumableArray from\"/Users/cameroncronheimer/Desktop/BrockChatbot/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/Users/cameroncronheimer/Desktop/BrockChatbot/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useRef}from\"react\";import\"./styles.css\";import{FaArrowUp}from\"react-icons/fa\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){var _useState=useState({message:\"\",from:\"user\"}),_useState2=_slicedToArray(_useState,2),inputText=_useState2[0],setInputText=_useState2[1];var _useState3=useState([{message:\"How can I help you?\",from:\"bot\"}]),_useState4=_slicedToArray(_useState3,2),messages=_useState4[0],setNewMessage=_useState4[1];var addMessage=function addMessage(e){e.preventDefault();setNewMessage([].concat(_toConsumableArray(messages),[inputText]));console.log(messages);};return/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"chat-title\",children:\"Chatbot\"}),/*#__PURE__*/_jsx(\"div\",{className:\"chat-container\",children:/*#__PURE__*/_jsx(\"div\",{className:\"chat\",children:/*#__PURE__*/_jsx(MessageList,{messages:messages})})}),/*#__PURE__*/_jsxs(\"div\",{id:\"myInput\",className:\"chat-input-container\",children:[/*#__PURE__*/_jsx(\"input\",{onKeyPress:function onKeyPress(event){if(event.key===\"Enter\"){addMessage(event);}},className:\"chat-input\",onChange:function onChange(e){setInputText({message:e.target.value,from:\"user\"});},placeholder:\"Enter Question!\"}),/*#__PURE__*/_jsx(\"div\",{id:\"myBtn\",className:\"add-question-button\",onClick:addMessage,children:/*#__PURE__*/_jsx(FaArrowUp,{})})]})]});}function MessageList(props){var messages=props.messages;var listMessages=messages.map(function(_ref){var message=_ref.message,from=_ref.from;return/*#__PURE__*/_jsx(Message,{value:message,from:from},(message+Date.now()).toString());});return/*#__PURE__*/_jsx(\"div\",{children:listMessages});}function Message(props){return/*#__PURE__*/_jsxs(\"div\",{className:\"message-\"+props.from+\"-container\",children:[props.from===\"bot\"&&/*#__PURE__*/_jsx(\"div\",{className:\"bot-profile\",children:\"\\uD83E\\uDD16\"}),/*#__PURE__*/_jsx(\"div\",{className:\"message-\"+props.from,children:props.value})]});}export default App;","map":{"version":3,"sources":["/Users/cameroncronheimer/Desktop/BrockChatbot/frontend/src/App.js"],"names":["React","useState","useRef","FaArrowUp","App","message","from","inputText","setInputText","messages","setNewMessage","addMessage","e","preventDefault","console","log","event","key","target","value","MessageList","props","listMessages","map","Date","now","toString","Message"],"mappings":"gSAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,MAA1B,KAAwC,OAAxC,CACA,MAAO,cAAP,CACA,OAASC,SAAT,KAA0B,gBAA1B,C,wFACA,QAASC,CAAAA,GAAT,EAAe,CACb,cAAkCH,QAAQ,CAAC,CAACI,OAAO,CAAE,EAAV,CAAcC,IAAI,CAAE,MAApB,CAAD,CAA1C,wCAAOC,SAAP,eAAkBC,YAAlB,eACA,eAAkCP,QAAQ,CAAC,CAAC,CAACI,OAAO,CAAE,qBAAV,CAAiCC,IAAI,CAAE,KAAvC,CAAD,CAAD,CAA1C,yCAAOG,QAAP,eAAiBC,aAAjB,eAGA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,CAAD,CAAO,CACxBA,CAAC,CAACC,cAAF,GACAH,aAAa,8BAAKD,QAAL,GAAeF,SAAf,GAAb,CACAO,OAAO,CAACC,GAAR,CAAYN,QAAZ,EACD,CAJD,CAOA,mBACE,aAAK,SAAS,CAAC,WAAf,wBACA,YAAK,SAAS,CAAC,YAAf,qBADA,cAEE,YAAK,SAAS,CAAC,gBAAf,uBACE,YAAK,SAAS,CAAC,MAAf,uBACE,KAAC,WAAD,EAAa,QAAQ,CAAEA,QAAvB,EADF,EADF,EAFF,cAOE,aAAK,EAAE,CAAC,SAAR,CAAkB,SAAS,CAAC,sBAA5B,wBAEE,cACE,UAAU,CAAE,oBAACO,KAAD,CAAW,CAAC,GAAIA,KAAK,CAACC,GAAN,GAAc,OAAlB,CAA2B,CAACN,UAAU,CAACK,KAAD,CAAV,CAAkB,CAAC,CADzE,CAEE,SAAS,CAAC,YAFZ,CAGE,QAAQ,CAAE,kBAACJ,CAAD,CAAO,CACfJ,YAAY,CAAC,CAACH,OAAO,CAAEO,CAAC,CAACM,MAAF,CAASC,KAAnB,CAA0Bb,IAAI,CAAE,MAAhC,CAAD,CAAZ,CACD,CALH,CAME,WAAW,CAAC,iBANd,EAFF,cAUE,YAAK,EAAE,CAAC,OAAR,CAAgB,SAAS,CAAC,qBAA1B,CAAgD,OAAO,CAAEK,UAAzD,uBACE,KAAC,SAAD,IADF,EAVF,GAPF,GADF,CAwBD,CAED,QAASS,CAAAA,WAAT,CAAqBC,KAArB,CAA4B,CAC1B,GAAMZ,CAAAA,QAAQ,CAAGY,KAAK,CAACZ,QAAvB,CACA,GAAMa,CAAAA,YAAY,CAAGb,QAAQ,CAACc,GAAT,CAAa,kBAAElB,CAAAA,OAAF,MAAEA,OAAF,CAAUC,IAAV,MAAUA,IAAV,oBAChC,KAAC,OAAD,EAA+C,KAAK,CAAED,OAAtD,CAA+D,IAAI,CAAEC,IAArE,EAAc,CAACD,OAAO,CAACmB,IAAI,CAACC,GAAL,EAAT,EAAqBC,QAArB,EAAd,CADgC,EAAb,CAArB,CAIA,mBAAO,qBAAMJ,YAAN,EAAP,CACD,CAED,QAASK,CAAAA,OAAT,CAAiBN,KAAjB,CAAwB,CACtB,mBAAM,aAAK,SAAS,CAAE,WAAWA,KAAK,CAACf,IAAjB,CAAsB,YAAtC,WAAqDe,KAAK,CAACf,IAAN,GAAa,KAAb,eAAuB,YAAK,SAAS,CAAC,aAAf,0BAA5E,cAAmH,YAAK,SAAS,CAAE,WAAWe,KAAK,CAACf,IAAjC,UAAwCe,KAAK,CAACF,KAA9C,EAAnH,GAAN,CACD,CAED,cAAef,CAAAA,GAAf","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport \"./styles.css\";\nimport { FaArrowUp } from \"react-icons/fa\";\nfunction App() {\n  const [inputText, setInputText] = useState({message: \"\", from: \"user\"});\n  const [messages, setNewMessage] = useState([{message: \"How can I help you?\", from: \"bot\"}]);\n  \n\n  const addMessage = (e) => {\n    e.preventDefault();\n    setNewMessage([...messages, inputText]);\n    console.log(messages);\n  };\n\n\n  return (\n    <div className=\"container\">\n    <div className=\"chat-title\">Chatbot</div>\n      <div className=\"chat-container\">\n        <div className=\"chat\">\n          <MessageList messages={messages} />\n        </div>\n      </div>\n      <div id=\"myInput\" className=\"chat-input-container\">\n\n        <input\n          onKeyPress={(event) => {if (event.key === \"Enter\") {addMessage(event)}}}\n          className=\"chat-input\" \n          onChange={(e) => {\n            setInputText({message: e.target.value, from: \"user\"});\n          }}\n          placeholder=\"Enter Question!\"\n        />\n        <div id=\"myBtn\" className=\"add-question-button\" onClick={addMessage} >\n          <FaArrowUp />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction MessageList(props) {\n  const messages = props.messages;\n  const listMessages = messages.map(({message,from}) => (\n    <Message key={(message+Date.now()).toString()} value={message} from={from} />\n  ));\n\n  return <div>{listMessages}</div>;\n}\n\nfunction Message(props) {\n  return<div className={\"message-\"+props.from+\"-container\"}>{props.from===\"bot\" && (<div className=\"bot-profile\">ðŸ¤–</div>)}<div className={\"message-\"+props.from}>{props.value}</div></div>;\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}