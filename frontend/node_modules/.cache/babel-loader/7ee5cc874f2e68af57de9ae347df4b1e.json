{"ast":null,"code":"var _jsxFileName = \"/Users/cameroncronheimer/Desktop/BrockChatbot/frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport \"./styles.css\";\nimport { FaArrowUp } from \"react-icons/fa\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [inputText, setInputText] = useState({\n    message: \"\",\n    from: \"user\"\n  });\n  const [messages, setNewMessage] = useState([{\n    message: \"How can I help you?\",\n    from: \"bot\"\n  }]);\n  const dummy = useRef();\n\n  const addMessage = e => {\n    e.preventDefault();\n    setNewMessage([...messages, inputText]);\n    dummy.current.scrollIntoView({\n      behavior: 'smooth'\n    });\n    console.log(messages);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"chat-bar-collapsible\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"chat-button\",\n      type: \"button\",\n      class: \"collapsible\",\n      children: [\" Chat with us!\", /*#__PURE__*/_jsxDEV(\"i\", {\n        id: \"chat-icon\",\n        style: {\n          color: \"#fff\"\n        },\n        class: \"fa fa-fw-comments-o\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 7\n  }, this); // return (\n  //   <div className=\"container\">\n  //   <div className=\"chat-title\">Chatbot</div>\n  //     <div className=\"chat-container\">\n  //       <div className=\"chat\">\n  //         <MessageList messages={messages} />\n  //         <div className=\"scrollInto\" ref={dummy}></div>\n  //       </div>\n  //     </div>\n  //     <div id=\"myInput\" className=\"chat-input-container\">\n  //       <input\n  //         onKeyPress={(event) => {if (event.key === \"Enter\") {addMessage(event)}}}\n  //         className=\"chat-input\" \n  //         onChange={(e) => {\n  //           setInputText({message: e.target.value, from: \"user\"});\n  //         }}\n  //         placeholder=\"Enter Question!\"\n  //       />\n  //       <div id=\"myBtn\" className=\"add-question-button\" onClick={addMessage} >\n  //         <FaArrowUp />\n  //       </div>\n  //     </div>\n  //   </div>\n  // );\n}\n\n_s(App, \"CjqjIEs1Bu+3QqFciIY+oevsry0=\");\n\n_c = App;\n\nfunction MessageList(props) {\n  const messages = props.messages;\n  const listMessages = messages.map(_ref => {\n    let {\n      message,\n      from\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(Message, {\n      value: message,\n      from: from\n    }, (message + Date.now()).toString(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: listMessages\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 10\n  }, this);\n}\n\n_c2 = MessageList;\n\nfunction Message(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message-\" + props.from + \"-container\",\n    children: [props.from === \"bot\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bot-profile\",\n      children: \"\\uD83E\\uDD16\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 85\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-\" + props.from,\n      children: props.value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 124\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n}\n\n_c3 = Message;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"MessageList\");\n$RefreshReg$(_c3, \"Message\");","map":{"version":3,"sources":["/Users/cameroncronheimer/Desktop/BrockChatbot/frontend/src/App.js"],"names":["React","useState","useRef","FaArrowUp","App","inputText","setInputText","message","from","messages","setNewMessage","dummy","addMessage","e","preventDefault","current","scrollIntoView","behavior","console","log","color","MessageList","props","listMessages","map","Date","now","toString","Message","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,OAAO,cAAP;AACA,SAASC,SAAT,QAA0B,gBAA1B;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC;AAACM,IAAAA,OAAO,EAAE,EAAV;AAAcC,IAAAA,IAAI,EAAE;AAApB,GAAD,CAA1C;AACA,QAAM,CAACC,QAAD,EAAWC,aAAX,IAA4BT,QAAQ,CAAC,CAAC;AAACM,IAAAA,OAAO,EAAE,qBAAV;AAAiCC,IAAAA,IAAI,EAAE;AAAvC,GAAD,CAAD,CAA1C;AAEA,QAAMG,KAAK,GAAGT,MAAM,EAApB;;AAGA,QAAMU,UAAU,GAAIC,CAAD,IAAO;AACxBA,IAAAA,CAAC,CAACC,cAAF;AACAJ,IAAAA,aAAa,CAAC,CAAC,GAAGD,QAAJ,EAAcJ,SAAd,CAAD,CAAb;AACAM,IAAAA,KAAK,CAACI,OAAN,CAAcC,cAAd,CAA6B;AAACC,MAAAA,QAAQ,EAAE;AAAX,KAA7B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYV,QAAZ;AACD,GALD;;AAOA,sBACI;AAAK,IAAA,KAAK,EAAC,sBAAX;AAAA,2BACE;AAAQ,MAAA,EAAE,EAAC,aAAX;AAAyB,MAAA,IAAI,EAAC,QAA9B;AAAuC,MAAA,KAAK,EAAC,aAA7C;AAAA,gDACI;AAAG,QAAA,EAAE,EAAC,WAAN;AAAkB,QAAA,KAAK,EAAE;AAACW,UAAAA,KAAK,EAAE;AAAR,SAAzB;AAA0C,QAAA,KAAK,EAAC;AAAhD;AAAA;AAAA;AAAA;AAAA,cADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADJ,CAda,CAsBb;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACD;;GApDQhB,G;;KAAAA,G;;AAsDT,SAASiB,WAAT,CAAqBC,KAArB,EAA4B;AAE1B,QAAMb,QAAQ,GAAGa,KAAK,CAACb,QAAvB;AACA,QAAMc,YAAY,GAAGd,QAAQ,CAACe,GAAT,CAAa;AAAA,QAAC;AAACjB,MAAAA,OAAD;AAASC,MAAAA;AAAT,KAAD;AAAA,wBAChC,QAAC,OAAD;AAA+C,MAAA,KAAK,EAAED,OAAtD;AAA+D,MAAA,IAAI,EAAEC;AAArE,OAAc,CAACD,OAAO,GAACkB,IAAI,CAACC,GAAL,EAAT,EAAqBC,QAArB,EAAd;AAAA;AAAA;AAAA;AAAA,YADgC;AAAA,GAAb,CAArB;AAIA,sBAAO;AAAA,cAAMJ;AAAN;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;MARQF,W;;AAUT,SAASO,OAAT,CAAiBN,KAAjB,EAAwB;AACtB,sBAAM;AAAK,IAAA,SAAS,EAAE,aAAWA,KAAK,CAACd,IAAjB,GAAsB,YAAtC;AAAA,eAAqDc,KAAK,CAACd,IAAN,KAAa,KAAb,iBAAuB;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAA5E,eAAmH;AAAK,MAAA,SAAS,EAAE,aAAWc,KAAK,CAACd,IAAjC;AAAA,gBAAwCc,KAAK,CAACO;AAA9C;AAAA;AAAA;AAAA;AAAA,YAAnH;AAAA;AAAA;AAAA;AAAA;AAAA,UAAN;AACD;;MAFQD,O;AAIT,eAAexB,GAAf","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport \"./styles.css\";\nimport { FaArrowUp } from \"react-icons/fa\";\n\nfunction App() {\n  const [inputText, setInputText] = useState({message: \"\", from: \"user\"});\n  const [messages, setNewMessage] = useState([{message: \"How can I help you?\", from: \"bot\"}]);\n  \n  const dummy = useRef();\n\n\n  const addMessage = (e) => {\n    e.preventDefault();\n    setNewMessage([...messages, inputText]);\n    dummy.current.scrollIntoView({behavior: 'smooth'});\n    console.log(messages);\n  };\n\n  return (\n      <div class=\"chat-bar-collapsible\">\n        <button id=\"chat-button\" type=\"button\" class=\"collapsible\"> Chat with us!\n            <i id=\"chat-icon\" style={{color: \"#fff\"}} class=\"fa fa-fw-comments-o\"></i>\n        </button>\n\n      </div>\n  );\n  // return (\n  //   <div className=\"container\">\n\n  //   <div className=\"chat-title\">Chatbot</div>\n\n\n  //     <div className=\"chat-container\">\n  //       <div className=\"chat\">\n  //         <MessageList messages={messages} />\n  //         <div className=\"scrollInto\" ref={dummy}></div>\n  //       </div>\n  //     </div>\n\n\n  //     <div id=\"myInput\" className=\"chat-input-container\">\n  //       <input\n  //         onKeyPress={(event) => {if (event.key === \"Enter\") {addMessage(event)}}}\n  //         className=\"chat-input\" \n  //         onChange={(e) => {\n  //           setInputText({message: e.target.value, from: \"user\"});\n  //         }}\n  //         placeholder=\"Enter Question!\"\n  //       />\n  //       <div id=\"myBtn\" className=\"add-question-button\" onClick={addMessage} >\n          \n  //         <FaArrowUp />\n  //       </div>\n  //     </div>\n  //   </div>\n  // );\n}\n\nfunction MessageList(props) {\n\n  const messages = props.messages;\n  const listMessages = messages.map(({message,from}) => (\n    <Message key={(message+Date.now()).toString()} value={message} from={from} />\n  ));\n\n  return <div>{listMessages}</div>;\n}\n\nfunction Message(props) {\n  return<div className={\"message-\"+props.from+\"-container\"}>{props.from===\"bot\" && (<div className=\"bot-profile\">ðŸ¤–</div>)}<div className={\"message-\"+props.from}>{props.value}</div></div>;\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}