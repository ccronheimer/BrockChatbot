{"ast":null,"code":"import _toConsumableArray from\"/Users/cameroncronheimer/Desktop/BrockChatbot/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/Users/cameroncronheimer/Desktop/BrockChatbot/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useRef,useEffect}from\"react\";import\"./styles.css\";import{FaArrowUp}from\"react-icons/fa\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){var _useState=useState({message:\"\",from:\"user\"}),_useState2=_slicedToArray(_useState,2),inputText=_useState2[0],setInputText=_useState2[1];var _useState3=useState([{message:\"How can I help you?\",from:\"bot\"}]),_useState4=_slicedToArray(_useState3,2),messages=_useState4[0],setNewMessage=_useState4[1];var dummy=useRef();var addMessage=function addMessage(e){e.preventDefault();setNewMessage([].concat(_toConsumableArray(messages),[inputText]));dummy.current.scrollIntoView({behavior:\"smooth\"});console.log(messages);};return/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"chat-title\",children:\"Chatbot\"}),/*#__PURE__*/_jsx(\"div\",{className:\"chat-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"chat\",children:[/*#__PURE__*/_jsx(MessageList,{messages:messages}),/*#__PURE__*/_jsx(\"div\",{className:\"scrollInto\",ref:dummy})]})}),/*#__PURE__*/_jsxs(\"div\",{id:\"myInput\",className:\"chat-input-container\",children:[/*#__PURE__*/_jsx(\"input\",{onKeyPress:function onKeyPress(event){if(event.key===\"Enter\"){addMessage(event);}},className:\"chat-input\",onChange:function onChange(e){setInputText({message:e.target.value,from:\"user\"});},placeholder:\"Enter Question!\"}),/*#__PURE__*/_jsx(\"div\",{id:\"myBtn\",className:\"add-question-button\",onClick:addMessage,children:/*#__PURE__*/_jsx(FaArrowUp,{})})]})]});}function MessageList(props){var messages=props.messages;var listMessages=messages.map(function(_ref,index){var message=_ref.message,from=_ref.from,onChipPress=_ref.onChipPress;return/*#__PURE__*/_jsx(Message,{value:message,from:from,onChipPress:onChipPress},index);});return/*#__PURE__*/_jsx(\"div\",{children:listMessages});}function Message(props){return/*#__PURE__*/_jsxs(\"div\",{className:\"message-\"+props.from+\"-container\",children:[props.from===\"bot\"&&/*#__PURE__*/_jsx(\"div\",{className:\"bot-profile\",children:\"\\uD83E\\uDD16\"}),/*#__PURE__*/_jsx(\"div\",{className:\"message-\"+props.from,children:props.value}),props.from===\"bot\"&&/*#__PURE__*/_jsxs(\"div\",{className:\"chips\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"Chip\",children:\"History\"}),/*#__PURE__*/_jsx(\"button\",{className:\"Chip\",children:\"Schedule\"}),/*#__PURE__*/_jsx(\"button\",{className:\"Chip\",children:\"Stats\"})]})]});}export default App;","map":{"version":3,"sources":["/Users/cameroncronheimer/Desktop/BrockChatbot/frontend/src/App.js"],"names":["React","useState","useRef","useEffect","FaArrowUp","App","message","from","inputText","setInputText","messages","setNewMessage","dummy","addMessage","e","preventDefault","current","scrollIntoView","behavior","console","log","event","key","target","value","MessageList","props","listMessages","map","index","onChipPress","Message"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport \"./styles.css\";\nimport { FaArrowUp } from \"react-icons/fa\";\n\nfunction App() {\n  const [inputText, setInputText] = useState({ message: \"\", from: \"user\" });\n  const [messages, setNewMessage] = useState([\n    { message: \"How can I help you?\", from: \"bot\" },\n  ]);\n\n  const dummy = useRef();\n\n\n  const addMessage = (e) => {\n    e.preventDefault();\n    setNewMessage([...messages, inputText]);\n    \n    dummy.current.scrollIntoView({ behavior: \"smooth\" });\n  \n    console.log(messages);\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"chat-title\">Chatbot</div>\n\n      <div className=\"chat-container\">\n        <div className=\"chat\">\n          <MessageList messages={messages} />\n          <div className=\"scrollInto\" ref={dummy}></div>\n        </div>\n      </div>\n\n      <div id=\"myInput\" className=\"chat-input-container\">\n        <input\n          onKeyPress={(event) => {\n            if (event.key === \"Enter\") {\n              addMessage(event);\n            }\n          }}\n          className=\"chat-input\"\n          onChange={(e) => {\n            setInputText({ message: e.target.value, from: \"user\" });\n          }}\n          placeholder=\"Enter Question!\"\n        />\n        <div id=\"myBtn\" className=\"add-question-button\" onClick={addMessage}>\n          <FaArrowUp />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction MessageList(props) {\n  const messages = props.messages;\n  \n  const listMessages = messages.map(({ message, from, onChipPress }, index) => (\n    <Message\n      key={index}\n      value={message}\n      from={from}\n      onChipPress={onChipPress}\n    />\n  ));\n\n  return <div>{listMessages}</div>;\n}\n\nfunction Message(props) {\n\n\n  return (\n    <div className={\"message-\" + props.from + \"-container\"}>\n      {props.from === \"bot\" && <div className=\"bot-profile\">ðŸ¤–</div>}\n      <div className={\"message-\" + props.from}>{props.value}</div>\n      \n      {props.from === \"bot\" && <div className=\"chips\">\n      <button className=\"Chip\">History</button>\n      <button className=\"Chip\">Schedule</button>\n      <button className=\"Chip\">Stats</button>\n      </div>\n      }\n    </div>\n    \n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}