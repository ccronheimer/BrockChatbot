{"ast":null,"code":"var _jsxFileName = \"/Users/cameroncronheimer/Desktop/BrockChatbot/frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const questions = ['Lorem ipsum dolor sit amet?', 'Lorem ipsum dolor sit amet2?', 'Lorem ipsum dolor sit amet3?'];\n  const [messages, setMessages] = useState(['How can I help you?']);\n\n  const handleAddMessage = () => {};\n\n  const [records, setRecords] = useState([]); // This method fetches the records from the database.\n\n  useEffect(() => {\n    async function getRecords() {\n      const response = await fetch(`http://localhost:5000/record/`);\n\n      if (!response.ok) {\n        const message = `An error occurred: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n\n      const records = await response.json();\n      setRecords(records);\n    }\n\n    getRecords();\n    return;\n  }, [records.length]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat\",\n        children: /*#__PURE__*/_jsxDEV(MessageList, {\n          messages: messages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input\",\n        children: /*#__PURE__*/_jsxDEV(QuestionList, {\n          questions: questions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"UvVq4U5UXqJaQpazh0CWLu+p2sE=\");\n\n_c = App;\n\nfunction MessageList(props) {\n  const messages = props.messages;\n  const listMessages = messages.map(message => /*#__PURE__*/_jsxDEV(Message, {\n    value: message\n  }, message, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: listMessages\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = MessageList;\n\nfunction Message(props) {\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: props.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 10\n  }, this);\n}\n\n_c3 = Message;\n\nfunction Question(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    children: props.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 10\n  }, this);\n}\n\n_c4 = Question;\n\nfunction QuestionList(props) {\n  const questions = props.questions;\n  const listQuestions = questions.map(question => /*#__PURE__*/_jsxDEV(Question, {\n    value: question\n  }, question, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: listQuestions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\n_c5 = QuestionList;\nexport default App;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"MessageList\");\n$RefreshReg$(_c3, \"Message\");\n$RefreshReg$(_c4, \"Question\");\n$RefreshReg$(_c5, \"QuestionList\");","map":{"version":3,"sources":["/Users/cameroncronheimer/Desktop/BrockChatbot/frontend/src/App.js"],"names":["React","useState","useEffect","App","questions","messages","setMessages","handleAddMessage","records","setRecords","getRecords","response","fetch","ok","message","statusText","window","alert","json","length","MessageList","props","listMessages","map","Message","value","Question","QuestionList","listQuestions","question"],"mappings":"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","sourcesContent":["import React,{useState, useEffect} from 'react';\nimport \"./styles.css\"\n\nfunction App() {\n\n  const questions = ['Lorem ipsum dolor sit amet?', 'Lorem ipsum dolor sit amet2?', 'Lorem ipsum dolor sit amet3?']\n \n  const [messages, setMessages] = useState(['How can I help you?']);\n  \n  const handleAddMessage = () => {\n    \n  };\n\n  const [records, setRecords] = useState([]);\n \n // This method fetches the records from the database.\n useEffect(() => {\n   async function getRecords() {\n     const response = await fetch(`http://localhost:5000/record/`);\n \n     if (!response.ok) {\n       const message = `An error occurred: ${response.statusText}`;\n       window.alert(message);\n       return;\n     }\n \n     const records = await response.json();\n     setRecords(records);\n   }\n \n   getRecords();\n \n   return;\n }, [records.length]);\n  return (\n    \n        <div className='container'>\n          <div className='chat-container'>\n            <div className='chat'>\n                <MessageList messages={messages}/>\n            </div>\n          </div>\n          <div className='chat-input-container'>\n            <div className='chat-input'>\n              <QuestionList questions={questions}/>\n            </div>\n          </div>\n        </div>\n \n  );\n}\nfunction MessageList(props) {\n  const messages = props.messages;\n  const listMessages = messages.map((message) => \n    <Message key={message} value={message}/>\n  );\n\n  return (\n    <div>\n      {listMessages}\n    </div>\n  )\n}\n\nfunction Message(props) {\n  return <p>{props.value}</p>\n}\n\nfunction Question(props) {\n  return <button>{props.value}</button>\n}\n\nfunction QuestionList(props) {\n  const questions = props.questions;\n  const listQuestions = questions.map((question) => \n    <Question key={question} value={question}/>\n  );\n\n  return (\n    <div>\n      {listQuestions}\n    </div>\n  )\n}\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}