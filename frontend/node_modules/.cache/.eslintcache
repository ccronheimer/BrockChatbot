[{"/Users/cameroncronheimer/Desktop/BrockChatbot/frontend/src/index.js":"1","/Users/cameroncronheimer/Desktop/BrockChatbot/frontend/src/App.js":"2"},{"size":289,"mtime":1644183614860,"results":"3","hashOfConfig":"4"},{"size":2216,"mtime":1646085875650,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"ogmhp7",{"filePath":"9","messages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"/Users/cameroncronheimer/Desktop/BrockChatbot/frontend/src/index.js",[],["12","13"],"/Users/cameroncronheimer/Desktop/BrockChatbot/frontend/src/App.js",["14"],"import React, { useState, useRef, useEffect } from \"react\";\nimport \"./styles.css\";\nimport { FaArrowUp } from \"react-icons/fa\";\n\nfunction App() {\n  const [inputText, setInputText] = useState({ message: \"\", from: \"user\" });\n  const [messages, setNewMessage] = useState([\n    { message: \"How can I help you?\", from: \"bot\" },\n  ]);\n\n  const dummy = useRef();\n\n\n  const addMessage = (e) => {\n    e.preventDefault();\n    setNewMessage([...messages, inputText]);\n    \n    dummy.current.scrollIntoView({ behavior: \"smooth\" });\n  \n    console.log(messages);\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"chat-title\">Chatbot</div>\n\n      <div className=\"chat-container\">\n        <div className=\"chat\">\n          <MessageList messages={messages} />\n          <div className=\"scrollInto\" ref={dummy}></div>\n        </div>\n      </div>\n\n      <div id=\"myInput\" className=\"chat-input-container\">\n        <input\n          onKeyPress={(event) => {\n            if (event.key === \"Enter\") {\n              addMessage(event);\n            }\n          }}\n          className=\"chat-input\"\n          onChange={(e) => {\n            setInputText({ message: e.target.value, from: \"user\" });\n          }}\n          placeholder=\"Enter Question!\"\n        />\n        <div id=\"myBtn\" className=\"add-question-button\" onClick={addMessage}>\n          <FaArrowUp />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction MessageList(props) {\n  const messages = props.messages;\n  \n  const listMessages = messages.map(({ message, from, onChipPress }, index) => (\n    <Message\n      key={index}\n      value={message}\n      from={from}\n      onChipPress={onChipPress}\n    />\n  ));\n\n  return <div>{listMessages}</div>;\n}\n\nfunction Message(props) {\n\n\n  return (\n    <div className={\"message-\" + props.from + \"-container\"}>\n      {props.from === \"bot\" && <div className=\"bot-profile\">ðŸ¤–</div>}\n      <div className={\"message-\" + props.from}>{props.value}</div>\n      \n      {props.from === \"bot\" && <div className=\"chips\">\n      <button className=\"Chip\">History</button>\n      <button className=\"Chip\">Schedule</button>\n      <button className=\"Chip\">Stats</button>\n      </div>\n      }\n    </div>\n    \n  );\n}\n\nexport default App;\n",{"ruleId":"15","replacedBy":"16"},{"ruleId":"17","replacedBy":"18"},{"ruleId":"19","severity":1,"message":"20","line":1,"column":35,"nodeType":"21","messageId":"22","endLine":1,"endColumn":44},"no-native-reassign",["23"],"no-negated-in-lhs",["24"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]